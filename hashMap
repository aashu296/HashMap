#include <iostream>
#include<unordered_map>
using namespace std;

int main() {
	// your code goes here
	unordered_map<string,int>ourMap;
	//insert
	pair<string,int> ("abc",1);
	ourmap.insert(p);
    ourMap["def"] = 2;
    
    //find or access element
    
    cout<<ourMap["abc"]<<endl;
    cout<<ourMap.at("abc")<<endl;
    cout<<"Size:"<<ourMap.size()<<endl;
    // cout<<ourMap.at("ghi")<<endl;
    cout<<ourMap["ghi"]<<endl;
    cout<<"Size:"<<ourMap.size()<<endl;
    
    // check presence
    if(ourMap.count("ghi")>0) {
     cout<<"ghi is present"<<endl;   
    }
	//delete
	//search
	
	
	return 0;
}

-----------REMOVE DUPLICATE FROM ARRAY OF INTEGERS-----------

#include<iostream>
#include<unordered_map>
#include<vector>
using namespace std;


    vector<int> removeDuplicates(int* a, int size){
        vector<int> output;
        unordered_map<int,bool>seen;
        for(int i=0;i<size;i++) {
            if(seen.count[a[i]] > 0) {
                continue;
            }
            seen[a[i]]= true;
            output.push_back(a[i]);
        }
        return output;
    }
    
int main() {
    int a[]= {1,5,7,4,262,69,3,4,47,6,3,2};
    vector<int>output = removeDuplicates(a,12);
    for(int i=0;i<ouput.size();i++) {
        cout<<output.a[i]<<endl;
    }
}


----------------------ITERATORS------------------------
#include<vector>
#include<iostream>
#include<unordered_map>
using namespace std;
int main() {
    unordered_map<string,int>ourMap;
    ourMap["abc"]=1;
    ourMap["def"]=2;
    ourMap["ghi"]=3;
    ourMap["jkl"]=4;
    ourMap["mno"]=5;
    ourMap["pqr"]=6;
    unordered_map<string,int>::iterator it= ourMap.begin();
    while(it!=ourMap.end()) {
        cout<<"Key:"<<it->first<<"Value:"<<it->second<<endl;
        it++;
    }
    //find
    unordered_map<string,int>iterator it2 = ourMap.find("abc");
    ourMap.erase(it2,it2+5);
    
    
    
    
    vector<int>v;
    v.push_back(1);
    v.push_back(2);
    v.push_back(3);
    v.push_back(4);
    v.push_back(5);
    
    vector<int>::iterator it1 =v.begin();
    while(it1!=v.end()) {
        cout<<*it1<<endl;
        it1++;
    }
}


--------CLASS OURMAP---------------
#include<string>
using namespace std;

template<typename V>
class MapNode {
    public:
    string key;
    V value;
    MapNode* next;
    MapNode(string key, V value) {
        this-> key = key;
        this->value - value;
        next=NULL;
    }    
        ~MapNode() {
            delete next;
        }
    
};


template typename V>

class ourmap {

    MapNode<V>** buckets;
    int size;
    int numBuckets=5;
    public:
    ourMap() {{
        size=0;
        numBuckets=5;
        buckets = new MapNode<V>*[numBuckets];;
        for(int i=0;i<numBuckets;i++) {
            buckets[i] = NULL;
        }
    }
    ~ourMap() {
      for(int int i=0;i<numBuckets;i++) {
          delete buckets[i];
      }  
      delete [] buckets;
    }
    int size() {
        return count;
    }
    V getValue(string key) {
     
     int bucketIndex = getBucketIndex(key);
     MapNode<V>* head= buckets[bucketIndex];
     while(head!=NULL) {
         if(head->key ==key) {
             return head->value;
         }
         return 0;
     }
        
        
    }
    
    
    private:
    
    int getBucketIndex(string key) {
        int hashCode;
        int currentCoeff=1;
        for(int i=key.length();i>0;i--) {
            hashCode+=key[i]*currentCoeff;
            currentCoeff*=37;
            currentCoeff=currentCoeff%numBuckets;
            hashCode=hashCode%numBuckets;
        }
        return hashCode % numBuckets;
    }
    
    void rehash() {
        
        
        
        MapNode<V>** temp = buckets;
        buckets = new MapNode<V>*[2*numBuckets];
        for(int i=0;i<2*numBuckets;i++) {
            buckets[i] = NULL;
        }
        int oldBuckets = numBuckets;
        numBuckets*=2;
        count=0;
        for(int i=0;i<oldBucketCount();i++) {
            MapNode<V>* head = temp[i];
            while(head!=NULL) {
                string key = head->key;
                V value = head->value;
                insert(key,value);
                head = head->next;
            }
        }
        for(int i=0;i<oldBucketCount;i++) {
            MapNode<V>* head = temp[i];
            delete head;
        }
        delete []temp;
    }
    public:
    double getLoadFactor() {
        return ((1.0)*count)/numBuckets;
    }
    
    void insert(string key, V value) {
        int bucketIndex= getBucketIndex(key);
        MapNode<V>* head = bucket[bucketIndex];
        while(head!=NULL) {
            if(head->key = key){
                head->value=value;
                return;
            }
            head=head->next;
        }
        head=bucket[bucketIndex];
        MapNode<V>* node = new MapNode(key,value);
        node->next=head;
        bucket[bucketIndex]= node;
        count++;
        double loadFactor = (1.0*count)/numBuckets;
        if(loafFactor > 0.7) {
            rehash();
        }
    }
        

        
    }
    V remove(string key) {
        int bucketIndex= getBucketIndex(string key);
        MapNode<V>* head= bucket[bucketIndex];
        MapNode<V>*prev =NULL;
        while(head!=NULL) {
            if (head->key =key) {
                if(prev==NULL) {
                  bucket[bucketIndex]=head->next;   
                }
                else{
                    prev->next= head->next;
                }
                V value = head->value;
                head->next=NULL;
                delete head;
                count--;
                return value;
            }
            prev =head;
            head=head->next;
        }
        return 0;
    }
    
    
};

-------------MAIN FUNCTION----------

#include<iostream>
#include"ourMap.h"
using namespace std;
int main() {
    ourMap<int>map;
    for(int i=0;i<10;i++) {
        char c = '0'+ i;
        string key= "abc";
        key= key+c;
        int value = i+1;
        map.insert(key,value);
        cout<<map.getLoadFactor()<<endl;
    }
    
    map.remove("abc2");
    mpa.remove("abc7");
    
    cout<<map.size()<<endl;
    
    for(int i=0;i<10;i++) {
        char c ='0'+i;
        string key= "abc";
        key+=c;
        cout<<key<<":"<<map.getValue(key)<<endl;
    }
    cout<<map.size()<<endl;
}





